import { IUserModel } from "../database/models/Users";
import { IUser } from "../interfaces/IUser";
import * as nodemailer from 'nodemailer';
import jwt from 'jsonwebtoken';
import {emailTransporter} from '../index';

// go to https://html-online.com/editor/ to generate html for the email
const sendVerifyEmail = async (user: IUserModel) => {
    const userEmail = user.email;

    // generating link for "CLICK HERE" in verification email
    const token = jwt.sign({_id : user._id.toString(), type : "verify"}, process.env.JWT_SECRET, {algorithm: 'HS256', expiresIn: '365d'})
    const verificationLink = (process.env.URI ? process.env.URI : "http://localhost:8081/") + "auth/verifyEmail/" + token;
    const verificationHTML = '<h1>Verify your account.</h1> <p>To get started on our platform please verify you account by clicking <a href="' + verificationLink + '">HERE</a>.</p> <p>Thanks,</p> <p>The PBRN team</p>';

    const mailOptions = {
        from: 'pbrnnetwork@gmail.com',
        to: userEmail,
        subject: 'PBRN Email verification',
        html: verificationHTML
      };

    emailTransporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        console.log(error);
    } else {
        console.log('Email sent: ' + info.response);
    }
    });
}

function sendApprovalEmail(user: IUserModel) {
  const userEmail = user.email;
  const firstName = user.firstName;
  const lastName = user.lastName;
  const verificationNotes = user.verificationNotes;

  const token = jwt.sign({_id : user._id.toString(), type : "approve"}, process.env.JWT_SECRET, {algorithm: 'HS256', expiresIn: '365d'})
  const approvalLink = (process.env.URI ? process.env.URI : "http://localhost:8081/") + "auth/approveUser/" + token;
  const approvalHtml = `<h1>User Approval Request.</h1><p>The following user has requested access to the platform.&nbsp;</p><p>Firstname: ${firstName};</p><p>Lastname: ${lastName} </p><p>Email: ${userEmail} &nbsp;</p><p>Verification Notes: ${verificationNotes} </p><p>&nbsp;</p><p>To approve this user, please click the following <a href='${approvalLink}'>link </a></p><p>&nbsp;</p><p>Please ignore this email if you would not like to approve this user.</p><p>&nbsp;</p><p>--</p><p>This email was autogenerated by pbrn-users. Please contact a system administrator if there are any errors.</p>`;

  const mailOptions = {
      from: process.env.SMTP_USER,
      to: userEmail, // TODO: change who the email should go to.
      subject: 'PBRN User Approval: ' + userEmail,
      html: approvalHtml
    };

  emailTransporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        console.log(error);
    } else {
        console.log('Email sent: ' + info.response);
    }
  });
}

function sendForgotPasswordEmail(user : IUserModel) {
  const newPassword = Math.random().toString(36).slice(-8);
  const userEmail = user.email;

  const token = jwt.sign({_id : user._id.toString(), newPassword, type: "forgotPassword"}, process.env.JWT_SECRET, {algorithm: 'HS256', expiresIn: '1d'})
  const approvalLink = (process.env.URI ? process.env.URI : "http://localhost:8081/") + "auth/forgotPasswordApproval/" + token;

  const forgotPasswordHtml = `<h1>Forgotten Password Request.</h1><p>We have received a forgotten password request for your account.&nbsp;</p><p>To approve this request, please click the following <a href='${approvalLink}'>link </a> to reset your password to ${newPassword}</p><p>&nbsp;</p><p>If you have not requested this, please ignore this email and your password will not be changed.</p><p>&nbsp;</p><p>--</p><p>This email was autogenerated by pbrn-users. Please contact a system administrator if there are any errors.</p>`;

  const mailOptions = {
    from: process.env.SMTP_USER,
    to: userEmail,
    subject: 'PBRN Forgot Password Request: ' + user.firstName,
    html: forgotPasswordHtml
  };

  emailTransporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        console.log(error);
    } else {
        console.log('Email sent: ' + info.response);
    }
  });
}

function isApprovedEmail(user: IUser){
  const verifiedEmails = ["@mail.mcgill.ca","@dms.umontreal.ca"];
  const userEmail = user.email;
  let i;
  for( i= 0; i<verifiedEmails.length; i++){
    if(userEmail.includes(verifiedEmails[i])){
      user.isApproved = true;
      return true;
    }
  }
  return false;

}

export {sendApprovalEmail, sendVerifyEmail, sendForgotPasswordEmail, isApprovedEmail};
